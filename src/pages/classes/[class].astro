---
import { Image } from "astro:assets";
import { getClassListings, type ClassListing } from "~/api/getClassListings";
import RootLayout from "~/layouts/RootLayout.astro";
import { formatClassTime } from "~/utils/formatClassTime";

const { class: classSlug } = Astro.params;
if (!classSlug) return Astro.redirect("/");

const classEntry = null as ClassListing | null;
if (!classEntry) return Astro.redirect("/");

const classListings = await getClassListings();

const classEntryListings = classListings.filter(
  (classListing) => classListing.id === classEntry.id,
);
---

<RootLayout title={classEntry.className!} class="flex flex-col gap-8">
  <div class="text-center flex flex-col gap-4 bg-violet-600 bg-opacity-10 p-8">
    <h1 class="text-gradient text-5xl font-bold m-auto">
      {classEntry.className}
    </h1>
    {
      classEntry.classTrackNumber ? (
        <p class="text-xl font-medium">
          Course {classEntry.classTrackNumber}: {classEntry.classTrack}
        </p>
      ) : null
    }
    <p class="max-w-screen-md m-auto">
      {classEntry.classHeader}
    </p>
  </div>
  <section class="flex gap-8 items-start flex-col lg:flex-row lg:gap-4">
    <Image
      src={classEntry.image}
      alt={`${classEntry.className}'s image.'`}
      width={600}
      height={337}
      class="flex-shrink-0 mx-auto"
    />
    <div class="flex flex-col gap-4">
      <h2 class="font-bold">{classEntry.classHeader}</h2>
      <ul class="list-disc list-inside">
        <!-- this page isn't really used, so to avoid the network call for pricing I'm commenting this out for now -->
        <!-- <li class="font-medium">&dollar;{classEntry.price}</li> -->
        <li class="font-medium">
          Meets on the same night, once a week for {classEntry.classLength}.
        </li>
        {
          classEntry.hasAShow ? (
            <li class="font-medium">
              This class will culminate in a live student showcase. Ensure you
              can make all the scheduled classes and the show before
              registering.
            </li>
          ) : null
        }
      </ul>
      <div
        class="flex flex-col gap-3 [&_a]:text-violet-600 [&_a:hover]:underline"
        set:html={classEntry.classDescription}
      />
    </div>
  </section>
  <section>
    <h2 class="text-xl font-bold mb-4">Upcoming Offerings</h2>
    {
      classEntryListings.length > 0 ? (
        <ul class="flex gap-2">
          {classEntryListings.map((classListing) => (
            <li class="rounded-md shadow-md p-4">
              <a href={classListing.listingUrl} class="group">
                <p>{formatClassTime(new Date(classListing.date))}</p>
                <p class="font-bold text-violet-500 mt-3 group-hover:underline">
                  Register Now
                </p>
              </a>
            </li>
          ))}
        </ul>
      ) : (
        <p>Nothing posted yet. Check back soon!</p>
      )
    }
  </section>
</RootLayout>
